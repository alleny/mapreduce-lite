<wiki:toc max_depth="2" />

= Introduction =

!MapReduce Lite can be built on Linux, Mac OS X and FreeBSD, with GCC (>=4.5.1) or Clang (>=3.0).

!MapReduce Lite depends on the following tools or libraries:

  * [http://www.cmake.org/ CMake] is used to manage and build the project.
  * [http://code.google.com/p/protobuf/ Google Protocol Buffers] is used for inter-worker communication and disk storage.
  * [http://code.google.com/p/google-gflags/ GFlags] is used to parse command line options.
  * [http://code.google.com/p/googletest/ Google Test] is used to write and run unit tests.
  * [http://www.boost.org/ Boost] helps developing multi-threading in asynchronous inter-worker communication and provides cross-platform filesystem support.
  * [http://libevent.org libevent] is used to support efficient asynchronous network communication.

Historically, !MapReduce Lite relies on Linux-specific system call, [http://linux.die.net/man/4/epoll epoll], which prevented !MapReduce Lite from being built and run on MacOS X and Cygwin.  Hao Yan has changed the code recently (2013-10-03) to replace the use of epoll by `libevent` (see [http://code.google.com/p/mapreduce-lite/issues/detail?id=2 this issue]).

= Install Building Tools =

== Install GCC or Clang ==

!MapReduce Lite can be built using GCC or Clang.

  * On Cygwin, run `setup.exe` and select `gcc` and `binutils`
  * On Debian/Ubuntu Linux
{{{
sudo apt-get install gcc binutils
}}}
  * On Mac OS X, install XCode gets you Clang.
  * On FreeBSD
{{{
sudo pkg_add -r clang
}}}

== Install CMake ==

!MapReduce Lite need CMake with version >= 2.8.0 to compile Google Protocol Buffer definitions.

To install CMake from binary packages:
  * On Cygwin, run `setup.exe` and select `cmake`
  * On Debian/Ubuntu Linux
{{{
sudo apt-get install cmake
}}}
  * On FreeBSD
{{{
sudo pkg_add -r cmake
}}}
  * On Mac OS X, if you have [http://mxcl.github.com/homebrew/ Howebew], you can run
{{{
brew install cmake
}}}
  or if you have [http://www.macports.org/ MacPorts], run
{{{
sudo port install cmake
}}}
  If you have neither Homebrew nor !MacPorts, you are recommended to install Homebrew: (Homebrew depends on Ruby, which should have been installed with XCode.)
{{{
ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
}}}
  If you have both Homebrew and !MacPorts, you will want to uninstall one of them.

You can also download binary or source package of CMake from: http://www.cmake.org/cmake/resources/software.html.

== Install Protobuf ==

!MapReduce Lite requires protobuf with version >= 2.3.0.

To install protobuf from binary packages:
  * On Mac OS X, you can run
{{{
brew install protobuf protobuf-c
}}}
  * On Linux, you can run
{{{
sudo apt-get install libprotobuf-dev libprotoc-dev
}}}
  * On FreeBSD, you can run
{{{
sudo pkg_add -r protobuf
}}}

Or, you can install protobuf from source code:
    # Download source code package (I am using `protobuf-2.5.0.tar.bz2`) from http://code.google.com/p/protobuf
    # Unpack the source code anywhere (e.g., `./protobuf-2.5.0`)
    # You need to install protobuf into the standard path, e.g., `/usr/local`, because we need CMake be able to find the protobuf compiler:
{{{
cd protobuf-2.5.0
./configure
make
sudo make install
}}}

= Install Dependencies =

It is recommended to install dependent libraries from source code, so you have more control on how to build them.

== Install GFlags ==

    # Download the source code package (e.g., `gflags-2.0.tar.gz`) from http://code.google.com/p/google-gflags
    # Unpack the source code anywhere (e.g., `./gflags-2.0`)
    # You are free to install gflags anywhere (e.g., `/home/you/3rd-party/gflags`):
{{{
cd gflags-2.0
./configure --prefix=/home/you/3rd-party/gflags-2.0
make && make install
ln -s /home/you/3rd-party/gflags-2.0 /home/you/3rd-party/gflags
}}}
    If you want to use Clang instead of GCC in building `libevent`, you can change the `./configure` line as `CC=clang ./configure`.

== Install !GoogleTest ==

    # Download the source code package (e.g., `gtest-1.7.0.tar.bz2`) from http://code.google.com/p/googletest/.
    # Unpack the source code, say, to `/home/you/3rd-party/gtest-1.7.0`
    # Make a symbolic link
{{{
ln -s /home/you/3rd-party/gtest-1.7.0 /home/you/3rd-party/gtest
}}}

Please note that since version 1.6.0, there is no longer `configure; make; make install` in google-test; instead, you have to incorporate the source code into your projects.  As google-test provides a CMakeLists.txt file, the CMakeLists.txt of !MapReduce Lite simply includes that file.

== Install Boost ==

We need a recent version of Boost.  Download the source package from http://www.boost.org/users/download/, and

{{{
cd /home/you/3rd-party/
tar xjf boost_1_54_0.tar.bz2
cd boost_1_54_0
./bootstrap --prefix=/home/you/3rd-party/boost-1_54_0
./b2 -j8
ln -s /home/you/3rd-party/boost-1_54_0 /home/you/3rd-party/boost
}}}

Since Boost is a large library, we use the option `-j8` with `./b2` to enable parallel compiling.

If you want to use Clang instead of GCC in building Boost, you need to add the following line to `boost_1_54_0/tools/build/v2/user-config.jam`:
{{{
using clang;
}}}
and invoke `./b2` as
{{{
./b2 -j8 toolset=clang
}}}

== Install libevent ==

  # Download libevent from http://libevent.org
  # Unpack the source code, build and install:
{{{
cd /home/you/3rd-party
tar xjf libevent-2.0.21-stable.tar.bz2
cd libevent-2.0.21-stable
./configure --prefix=/home/you/3rd-party/libevent-2.0.21-stable
make && make install
ln -s /home/you/3rd-party/libevent-2.0.21-stable /home/wyi/3rd-party/libevent
}}}
    If you want to use Clang instead of GCC in building `libevent`, you can change the `./configure` line as `CC=clang ./configure`.

= Build !MapReduce Lite =

With above dependencies installed, building !MapReduce Lite is easy:

  # Checkout the code:
{{{
svn checkout http://mapreduce-lite.googlecode.com/svn/trunk/ mapreduce-lite-read-only
}}}
  # Setup third-party libs:
    Open `mapreduce-lite-read-only/CMakeLists.txt` in a text editor and find the following line
{{{
set(THIRD_PARTY_DIR "/home/you/3rd-party")
}}}
    Change the value to the directory where you place above dependent third-party libraries.
  # Setup the installation destination
    Open `mapreduce-lite-read-only/CMakeLists.txt` in a text editor and find the following line
{{{
set(CMAKE_INSTALL_PREFIX "/home/you/mapreduce-lite")
}}}
    Change the value to where you want to install !MapReduce Lite and demos.
  # Build !MapReduce Lite
    With CMake, we usually build in a directory different from the source directory:
{{{
mkdir build
cd build
cmake ../mapreduce-lite-read-only
make
make install
}}}
    If you want to use Clang instead of GCC to build !Mapreduce Lite, you need
{{{
CXX=clang++ CC=clang cmake ../mapreduce-lite-read-only
}}}