#Build !MapReduce Lite

<font color=red>This page is under construction and not yet finished.</font>

= Introduction =

!MapReduce Lite can be built and run on a modern Linux system (with kernel version >= 2.6).  

Currently, the use of Linux-specific system call, [linux.die.net/man/4/epoll epoll], prevents !MapReduce Lite from being built on MacOS X and Cygwin.  We are trying to use libevent to replace epoll (see [http://code.google.com/p/mapreduce-lite/issues/detail?id=2 this issue]).

= Build/Install Dependencies =

  * [http://www.cmake.org/ CMake] is used to manage and build the project.
  * [http://code.google.com/p/protobuf/ Google Protocol Buffers] is used for inter-worker communication and disk storage.
  * [http://code.google.com/p/google-gflags/ GFlags] is used to parse command line options.
  * [http://code.google.com/p/googletest/ Google Test] is used to write and run unit tests.
  * [http://www.boost.org/ Boost] helps developing multi-threading in asynchronous inter-worker communication and provides cross-platform filesystem support.

== Install GCC ==
    # On Cygwin, run `setup.exe` and select `gcc` and `binutils`
    # On Debian/Ubuntu Linux
{{{
sudo apt-get install gcc binutils
}}}
    # On Mac OS X, install XCode


== Install CMake ==
It is OK to install CMake in from binary package. But please be aware that we need a version larger than 2.8.0, because we used Google protocol buffers in !MapReduce Lite and older versions of CMake does not support protocol buffers.

To install CMake from binary packages using package managers:
    # For Cygwin, run `setup.exe` and select `cmake`
    # For Debian/Ubuntu Linux
{{{
sudo apt-get install cmake
}}}
    # For Mac OS X, if you have [http://mxcl.github.com/homebrew/ Howebew], you can run
{{{
brew install cmake
}}}
    or if you have [http://www.macports.org/ MacPorts], run
{{{
sudo port install cmake
}}}
    If you have neither Homebrew nor !MacPorts, you are recommended to install Homebrew: (Homebrew depends on Ruby, which should have been installed with XCode.)
{{{
ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
}}}
    If you have both Homebrew and !MacPorts, you are not lucky -- you definitely want to uninstall one of them, and I do not know how to do that cleanly.

You can also download binary and source packages of CMake from: http://www.cmake.org/cmake/resources/software.html.

== Install Protobuf ==
    # Download source code package (I am using `protobuf-2.3.0.tar.bz2`) from http://code.google.com/p/protobuf
    # Unpack the source code anywhere (e.g., `./protobuf-2.3.0`)
    # You need to install protobuf into the standard path, e.g., `/usr/local`, because we need CMake be able to find the protobuf compiler:
{{{
cd protobuf-2.3.0
./configure
make
sudo make install
}}}

== Install GFlags ==
    # Download the source code package (e.g., `gflags-1.4.tar.gz`) from http://code.google.com/p/google-gflags/
    # Unpack the source code anywhere (e.g., `./gflags-1.4`)
    # You are free to install gflags anywhere (e.g., `/home/you/3rd-party/gflags`):
{{{
cd gflags-1.4
./configure --prefix=/home/you/3rd-party/gflags-1.4
make && make install
ln -s /home/you/3rd-party/gflags-1.4 /home/you/3rd-party/gflags
}}}

== Install !GoogleTest ==

    # Download the source code package (e.g., `gtest-1.5.0.tar.bz2`) from http://code.google.com/p/googletest/.
    # Unpack the source code anywhere (e.g., `./gtest-1.5.0`)
    # You are free to install gflags anywhere (e.g., `/home/you/3rd-party/gtest`):
{{{
cd gtest-1.5.0
./configure --prefix=/home/you/3rd-party/gtest-1.5.0
make && make install
ln -s /home/you/3rd-party/gtest-1.5.0 /home/you/3rd-party/gtest
}}}
!GoogleTest 1.6.0 works in a significantly different way than 1.5.0 -- there is no `make && make install` in 1.6.0, instead, you need to build it together with every of your projects.  We are going to switch to !GoogleTest 1.6.0 in the near future.

== Install Boost ==
    We need a recent version of Boost.  Download the source package from http://www.boost.org/users/download/, and
{{{
tar xjf boost_1_44_1.tar.bz2
cd boost_1_44_1
./bootstrap --prefix=/home/you/3rd-party/boost-1.44
./bjam install
ln -s /home/you/3rd-party/boost-1.44 /home/you/3rd-party/boost
}}}


= Build !MapReduce Lite =

Given above dependencies install, building !MapReduce Lite is easy:
   # Checkout the code:
{{{
svn checkout http://mapreduce-lite.googlecode.com/svn/trunk/ mapreduce-lite-read-only
}}}
   # Setup third-party libs:
   Open `mapreduce-lite-read-only/CMakeLists.txt` in a text editor. Find the line
{{{
set(THIRD_PARTY_DIR "/home/yiwang/3rd-party")
}}}
   and replace `/home/yiwang/3rd-party` to where you have installed your 3rd-party libraries (referred to as `/home/you/3rd-party` in above section).